{"repository_name":"duration","body":"# Duration\n\nThis shard allows you to represent both monotonic and calendar durations in a single struct.\n\nThe three ways to track durations of time with the `Duration` type are:\n\n1. Calendar Months\n2. Calendar Days\n3. Monotonic time with nanosecond precision\n\n### Calendar Months\n\nMonths can be anywhere from 28-31 days. Tracking calendar months with `Duration` is similar to the `Time::MonthSpan` in the Crystal stdlib, but with extra functionality.\n\n### Calendar days\n\nIt's easy to think of a day as 24 hours, but due to Daylight Savings Time, days can be anywhere from 23-25 hours long. `Duration` is great for when you need to measure things in calendar days and not necessarily 24-hour chunks.\n\n### Monotonic time\n\nMonotonic time is what the Crystal stdlib `Time::Span` measures. `Duration` doesn't have the same capacity as `Time::Span`, but it still gives you about 300 years of monotonic time to play with.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     duration:\n       github: jgaskins/duration\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"duration\"\n\nduration = Duration.new(months: 12, days: 34, nanoseconds: 5678)\n\nyears = Duration.new(years: 3)\nyears = 3.calendar_years\n\nmonths = Duration.new(months: 6)\nmonths = 6.calendar_months\n\nweeks = Duration.new(weeks: 3)\nweeks = 3.calendar_weeks\n\ndays = Duration.new(days: 20)\ndays = 20.calendar_days\n\nmonotonic = Duration.new(hours: 6, minutes: 35, seconds: 10)\n```\n\nMonotonic durations don't have a method you can add onto `Number` like the calendar units do, but you can use methods that generate `Time::Span` instances and then call `to_duration` on them:\n\n```crystal\nduration = 1.hour.to_duration\n```\n\nYou can also convert the monotonic portion of a `Duration` instance to a `Time::Span`:\n\n```crystal\nspan = Duration.new(hours: 3).to_span\n```\n\n> [!IMPORTANT]\n> Only the monotonic portion (the value returned by `nanoseconds`) is used in this conversion. `Time::Span` does not have a way to measure calendar days. If you would like to consider calendar days as 24-hour increments, you will need to pass `include_days: true`. Days are not included by default because they are not guaranteed to be 24 hours, for example across DST boundaries.\n\n```crystal\nduration = Duration.new(days: 2, hours: 3)\n\nspan = duration.to_span(include_days: true)\n```\n\nTime math is also supported:\n\n```crystal\nTime.utc + Duration.new(years: 1, months: 4, weeks: 6, days: 3, hours: 12, minutes: 34, seconds: 56)\n```\n\n### Using with Postgres\n\nYou can also decode `Duration` instances from Postgres directly. Let's say you have a model for subscriptions, which can have variable durations:\n\n```crystal\n# Load the Postgres integration\nrequire \"duration/pg\"\n\nstruct Subscription\n  include DB::Serializable\n\n  getter id : UUID\n  # Using a Duration type defined by this shard.\n  getter duration : Duration\nend\n```\n\nNow we can query our table and return `Duration` instances without a `@[DB::Field]` annotation with a `converter`.\n\n```crystal\n# Connect to Postgres\npg = DB.open(\"postgres:///\")\n\n# Return a result set with a UUID and an INTERVAL type\nsql = <<-SQL\n  SELECT\n    gen_random_uuid() AS id,\n    '1 month'::interval AS duration\n  FROM generate_series(1, 2)\n  SQL\n\n# When we iterate over our results, we'll get our Subscription struct above.\npg.query_each sql do |rs|\n  pp Subscription.new rs\nend\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/jgaskins/duration/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Jamie Gaskins](https://github.com/jgaskins) - creator and maintainer\n","program":{"html_id":"duration/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"duration","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"duration/Duration","path":"Duration.html","kind":"struct","full_name":"Duration","name":"Duration","abstract":false,"superclass":{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"duration/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"duration/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/duration.cr","line_number":5,"url":null},{"filename":"src/parser/iso8601.cr","line_number":1,"url":null},{"filename":"src/pg.cr","line_number":6,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"The `Duration` type represents calendar months, calendar days, and monotonic\ntime spans, allowing for more precise temporal math.","summary":"<p>The <code><a href=\"Duration.html\">Duration</a></code> type represents calendar months, calendar days, and monotonic time spans, allowing for more precise temporal math.</p>","class_methods":[{"html_id":"parse_iso8601(string:String)-class-method","name":"parse_iso8601","doc":"Parse [ISO8601 duration strings](https://en.wikipedia.org/wiki/ISO_8601#Durations) \nlike `\"P3Y6M4DT12H30M5S\"` into `Duration` instances.\n\n```\n# 3 years, 6 months, 4 days, 12 hours, 30 minutes, 5.5 seconds\nDuration.parse_iso8601(\"P3Y6M4DT12H30M5.5S\")\n# => Duration(@months=42, @days=4, @nanoseconds=45005500000000)\n```\n\nThe parser is incredibly efficient and performs no heap allocations.","summary":"<p>Parse <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Durations\">ISO8601 duration strings</a>  like <code>&quot;P3Y6M4DT12H30M5S&quot;</code> into <code><a href=\"Duration.html\">Duration</a></code> instances.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String)","args_html":"(string : String)","location":{"filename":"src/duration.cr","line_number":55,"url":null},"def":{"name":"parse_iso8601","args":[{"name":"string","external_name":"string","restriction":"String"}],"visibility":"Public","body":"Parser::ISO8601.new.parse(string)"}}],"constructors":[{"html_id":"new(month_span:Time::MonthSpan,span:Time::Span)-class-method","name":"new","doc":"Instantiate a `Duration` from both a `Time::MonthSpan` and a `Time::Span`.\n\n```\nDuration.new(5.seconds)\n# => Duration(@months=0, @days=0, @nanoseconds=5000000000)\n```\n\nNOTE: While you can get months and monotonic time, there is no way to get\ncalendar days from this constructor.","summary":"<p>Instantiate a <code><a href=\"Duration.html\">Duration</a></code> from both a <code><a href=\"Time/MonthSpan.html\">Time::MonthSpan</a></code> and a <code><a href=\"Time/Span.html\">Time::Span</a></code>.</p>","abstract":false,"args":[{"name":"month_span","external_name":"month_span","restriction":"Time::MonthSpan"},{"name":"span","external_name":"span","restriction":"Time::Span"}],"args_string":"(month_span : Time::MonthSpan, span : Time::Span)","args_html":"(month_span : <a href=\"Time/MonthSpan.html\">Time::MonthSpan</a>, span : <a href=\"Time/Span.html\">Time::Span</a>)","location":{"filename":"src/duration.cr","line_number":41,"url":null},"def":{"name":"new","args":[{"name":"month_span","external_name":"month_span","restriction":"Time::MonthSpan"},{"name":"span","external_name":"span","restriction":"Time::Span"}],"visibility":"Public","body":"(new(month_span)) + (new(span))"}},{"html_id":"new(span:Time::Span)-class-method","name":"new","doc":"Instantiate a `Duration` from a `Time::Span`.\n\n```\nDuration.new(5.seconds)\n# => Duration(@months=0, @days=0, @nanoseconds=5000000000)\n```","summary":"<p>Instantiate a <code><a href=\"Duration.html\">Duration</a></code> from a <code><a href=\"Time/Span.html\">Time::Span</a></code>.</p>","abstract":false,"args":[{"name":"span","external_name":"span","restriction":"Time::Span"}],"args_string":"(span : Time::Span)","args_html":"(span : <a href=\"Time/Span.html\">Time::Span</a>)","location":{"filename":"src/duration.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"span","external_name":"span","restriction":"Time::Span"}],"visibility":"Public","body":"new(nanoseconds: span.total_nanoseconds.to_i64)"}},{"html_id":"new(month_span:Time::MonthSpan)-class-method","name":"new","doc":"Instantiate a `Duration` from a `Time::MonthSpan`.\n\n```\nDuration.new(6.months)\n# => Duration(@months=6, @days=0, @nanoseconds=0)\n```","summary":"<p>Instantiate a <code><a href=\"Duration.html\">Duration</a></code> from a <code><a href=\"Time/MonthSpan.html\">Time::MonthSpan</a></code>.</p>","abstract":false,"args":[{"name":"month_span","external_name":"month_span","restriction":"Time::MonthSpan"}],"args_string":"(month_span : Time::MonthSpan)","args_html":"(month_span : <a href=\"Time/MonthSpan.html\">Time::MonthSpan</a>)","location":{"filename":"src/duration.cr","line_number":28,"url":null},"def":{"name":"new","args":[{"name":"month_span","external_name":"month_span","restriction":"Time::MonthSpan"}],"visibility":"Public","body":"new(months: month_span.value.to_i32)"}},{"html_id":"new(*,years:Int32=0,months:Int32=0,weeks:Int64=0,days:Int32=0,hours:Int64=0_i64,minutes:Int64=0_i64,seconds:Int64=0_i64,milliseconds:Int64=0_i64,microseconds:Int64=0_i64,nanoseconds:Int64=0_i64)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"years","default_value":"0","external_name":"years","restriction":"Int32"},{"name":"months","default_value":"0","external_name":"months","restriction":"Int32"},{"name":"weeks","default_value":"0","external_name":"weeks","restriction":"Int64"},{"name":"days","default_value":"0","external_name":"days","restriction":"::Int32"},{"name":"hours","default_value":"0_i64","external_name":"hours","restriction":"Int64"},{"name":"minutes","default_value":"0_i64","external_name":"minutes","restriction":"Int64"},{"name":"seconds","default_value":"0_i64","external_name":"seconds","restriction":"Int64"},{"name":"milliseconds","default_value":"0_i64","external_name":"milliseconds","restriction":"Int64"},{"name":"microseconds","default_value":"0_i64","external_name":"microseconds","restriction":"Int64"},{"name":"nanoseconds","default_value":"0_i64","external_name":"nanoseconds","restriction":"::Int64"}],"args_string":"(*, years : Int32 = 0, months : Int32 = 0, weeks : Int64 = 0, days : Int32 = 0, hours : Int64 = 0_i64, minutes : Int64 = 0_i64, seconds : Int64 = 0_i64, milliseconds : Int64 = 0_i64, microseconds : Int64 = 0_i64, nanoseconds : Int64 = 0_i64)","args_html":"(*, years : Int32 = <span class=\"n\">0</span>, months : Int32 = <span class=\"n\">0</span>, weeks : Int64 = <span class=\"n\">0</span>, days : Int32 = <span class=\"n\">0</span>, hours : Int64 = <span class=\"n\">0_i64</span>, minutes : Int64 = <span class=\"n\">0_i64</span>, seconds : Int64 = <span class=\"n\">0_i64</span>, milliseconds : Int64 = <span class=\"n\">0_i64</span>, microseconds : Int64 = <span class=\"n\">0_i64</span>, nanoseconds : Int64 = <span class=\"n\">0_i64</span>)","location":{"filename":"src/duration.cr","line_number":59,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"years","default_value":"0","external_name":"years","restriction":"Int32"},{"name":"months","default_value":"0","external_name":"months","restriction":"Int32"},{"name":"weeks","default_value":"0","external_name":"weeks","restriction":"Int64"},{"name":"days","default_value":"0","external_name":"days","restriction":"::Int32"},{"name":"hours","default_value":"0_i64","external_name":"hours","restriction":"Int64"},{"name":"minutes","default_value":"0_i64","external_name":"minutes","restriction":"Int64"},{"name":"seconds","default_value":"0_i64","external_name":"seconds","restriction":"Int64"},{"name":"milliseconds","default_value":"0_i64","external_name":"milliseconds","restriction":"Int64"},{"name":"microseconds","default_value":"0_i64","external_name":"microseconds","restriction":"Int64"},{"name":"nanoseconds","default_value":"0_i64","external_name":"nanoseconds","restriction":"::Int64"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(years: years, months: months, weeks: weeks, days: days, hours: hours, minutes: minutes, seconds: seconds, milliseconds: milliseconds, microseconds: microseconds, nanoseconds: nanoseconds)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"*(factor:Int):self-instance-method","name":"*","doc":"Multiplies this `Duration` by the given factor.","summary":"<p>Multiplies this <code><a href=\"Duration.html\">Duration</a></code> by the given factor.</p>","abstract":false,"args":[{"name":"factor","external_name":"factor","restriction":"Int"}],"args_string":"(factor : Int) : self","args_html":"(factor : <a href=\"Int.html\">Int</a>) : <span class=\"k\">self</span>","location":{"filename":"src/duration.cr","line_number":187,"url":null},"def":{"name":"*","args":[{"name":"factor","external_name":"factor","restriction":"Int"}],"return_type":"self","visibility":"Public","body":"self.class.new(months: months * factor, days: days * factor, nanoseconds: nanoseconds * factor)"}},{"html_id":"+(other:Time::Span|Time::MonthSpan):self-instance-method","name":"+","doc":"Add a `Time::Span` a `Time::MonthSpan` from the crystal standard library to this `Duration`. The `Time::Span` will be added to the monotonic portion of this `Duration` and the `Time::MonthSpan` will be added to the `months` portion.\n\n```\nDuration.new(years: 1) + 1.month + 1.hour\n# => Duration(@months=13, @days=0, @nanoseconds=3600000000000)\n```","summary":"<p>Add a <code><a href=\"Time/Span.html\">Time::Span</a></code> a <code><a href=\"Time/MonthSpan.html\">Time::MonthSpan</a></code> from the crystal standard library to this <code><a href=\"Duration.html\">Duration</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Time::Span | Time::MonthSpan"}],"args_string":"(other : Time::Span | Time::MonthSpan) : self","args_html":"(other : <a href=\"Time/Span.html\">Time::Span</a> | <a href=\"Time/MonthSpan.html\">Time::MonthSpan</a>) : <span class=\"k\">self</span>","location":{"filename":"src/duration.cr","line_number":156,"url":null},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"Time::Span | Time::MonthSpan"}],"return_type":"self","visibility":"Public","body":"self + other.to_duration"}},{"html_id":"+(other:self):self-instance-method","name":"+","doc":"Returns the sum of two `Duration` instances.","summary":"<p>Returns the sum of two <code><a href=\"Duration.html\">Duration</a></code> instances.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : self","args_html":"(other : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/duration.cr","line_number":161,"url":null},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"self","visibility":"Public","body":"self.class.new(months: months + other.months, days: days + other.days, nanoseconds: nanoseconds + other.nanoseconds)"}},{"html_id":"-(other:Time::Span|Time::MonthSpan):self-instance-method","name":"-","doc":"Subtract a `Time::Span` or `Time::MonthSpan` (from the crystal standard\nlibrary) to this `Duration`. The `Time::Span` will be subtracted from the\nmonotonic portion of this `Duration` and the `Time::MonthSpan` will be\nsubtracted from the `months` portion.","summary":"<p>Subtract a <code><a href=\"Time/Span.html\">Time::Span</a></code> or <code><a href=\"Time/MonthSpan.html\">Time::MonthSpan</a></code> (from the crystal standard library) to this <code><a href=\"Duration.html\">Duration</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Time::Span | Time::MonthSpan"}],"args_string":"(other : Time::Span | Time::MonthSpan) : self","args_html":"(other : <a href=\"Time/Span.html\">Time::Span</a> | <a href=\"Time/MonthSpan.html\">Time::MonthSpan</a>) : <span class=\"k\">self</span>","location":{"filename":"src/duration.cr","line_number":173,"url":null},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"Time::Span | Time::MonthSpan"}],"return_type":"self","visibility":"Public","body":"self - other.to_duration"}},{"html_id":"-(other:self):self-instance-method","name":"-","doc":"Returns the difference between two `Duration` instances.","summary":"<p>Returns the difference between two <code><a href=\"Duration.html\">Duration</a></code> instances.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : self","args_html":"(other : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/duration.cr","line_number":178,"url":null},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"self","visibility":"Public","body":"self.class.new(months: months - other.months, days: days - other.days, nanoseconds: nanoseconds - other.nanoseconds)"}},{"html_id":"//(factor:Int):self-instance-method","name":"//","doc":"Divides this `Durtation` by the given scalar. Note that only integer division is supported.","summary":"<p>Divides this <code>Durtation</code> by the given scalar.</p>","abstract":false,"args":[{"name":"factor","external_name":"factor","restriction":"Int"}],"args_string":"(factor : Int) : self","args_html":"(factor : <a href=\"Int.html\">Int</a>) : <span class=\"k\">self</span>","location":{"filename":"src/duration.cr","line_number":196,"url":null},"def":{"name":"//","args":[{"name":"factor","external_name":"factor","restriction":"Int"}],"return_type":"self","visibility":"Public","body":"self.class.new(months: months // factor, days: days // factor, nanoseconds: nanoseconds // factor)"}},{"html_id":"ago(location=Time::Location.local)-instance-method","name":"ago","doc":"Returns the time that this `Duration` represents before the current local time.\n\n```\n1.calendar_day.ago\n```","summary":"<p>Returns the time that this <code><a href=\"Duration.html\">Duration</a></code> represents before the current local time.</p>","abstract":false,"args":[{"name":"location","default_value":"Time::Location.local","external_name":"location","restriction":""}],"args_string":"(location = Time::Location.local)","args_html":"(location = <span class=\"t\">Time</span><span class=\"t\">::</span><span class=\"t\">Location</span>.local)","location":{"filename":"src/duration.cr","line_number":227,"url":null},"def":{"name":"ago","args":[{"name":"location","default_value":"Time::Location.local","external_name":"location","restriction":""}],"visibility":"Public","body":"before(Time.local(location))"}},{"html_id":"before(time:Time)-instance-method","name":"before","doc":"Returns the time that this `Duration` represents before the given time.\n\n```\nprevious_run = 1.calendar_day.before(next_scheduled_run)\n```","summary":"<p>Returns the time that this <code><a href=\"Duration.html\">Duration</a></code> represents before the given time.</p>","abstract":false,"args":[{"name":"time","external_name":"time","restriction":"Time"}],"args_string":"(time : Time)","args_html":"(time : <a href=\"Time.html\">Time</a>)","location":{"filename":"src/duration.cr","line_number":236,"url":null},"def":{"name":"before","args":[{"name":"time","external_name":"time","restriction":"Time"}],"visibility":"Public","body":"time - self"}},{"html_id":"days:Int32-instance-method","name":"days","abstract":false,"location":{"filename":"src/duration.cr","line_number":9,"url":null},"def":{"name":"days","return_type":"Int32","visibility":"Public","body":"@days"}},{"html_id":"from(time:Time)-instance-method","name":"from","doc":"Returns the time that this `Duration` represents from the given time.\n\n```\nnext_bill_at = 1.calendar_month.from(subscription.last_billed_at)\n```","summary":"<p>Returns the time that this <code><a href=\"Duration.html\">Duration</a></code> represents from the given time.</p>","abstract":false,"args":[{"name":"time","external_name":"time","restriction":"Time"}],"args_string":"(time : Time)","args_html":"(time : <a href=\"Time.html\">Time</a>)","location":{"filename":"src/duration.cr","line_number":218,"url":null},"def":{"name":"from","args":[{"name":"time","external_name":"time","restriction":"Time"}],"visibility":"Public","body":"time + self"}},{"html_id":"from_now(location=Time::Location.local)-instance-method","name":"from_now","doc":"Returns the time that this `Duration` represents from the current local time.\n\n```\n1.calendar_day.from_now\n```","summary":"<p>Returns the time that this <code><a href=\"Duration.html\">Duration</a></code> represents from the current local time.</p>","abstract":false,"args":[{"name":"location","default_value":"Time::Location.local","external_name":"location","restriction":""}],"args_string":"(location = Time::Location.local)","args_html":"(location = <span class=\"t\">Time</span><span class=\"t\">::</span><span class=\"t\">Location</span>.local)","location":{"filename":"src/duration.cr","line_number":209,"url":null},"def":{"name":"from_now","args":[{"name":"location","default_value":"Time::Location.local","external_name":"location","restriction":""}],"visibility":"Public","body":"from(Time.local(location))"}},{"html_id":"hours:Float64-instance-method","name":"hours","doc":"Returns monotonic hours, including the fractional part.\n\n```\nDuration.new(hours: 3, minutes: 30).hours # => 3.5\n```","summary":"<p>Returns monotonic hours, including the fractional part.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":86,"url":null},"def":{"name":"hours","return_type":"Float64","visibility":"Public","body":"minutes / 60"}},{"html_id":"microseconds:Float64-instance-method","name":"microseconds","doc":"Returns monotonic microseconds, including the fractional part.\n\n```\nDuration.new(nanoseconds: 15_500).microseconds # => 15.5\n```","summary":"<p>Returns monotonic microseconds, including the fractional part.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":122,"url":null},"def":{"name":"microseconds","return_type":"Float64","visibility":"Public","body":"nanoseconds / 1000"}},{"html_id":"milliseconds:Float64-instance-method","name":"milliseconds","doc":"Returns monotonic milliseconds, including the fractional part.\n\n```\nDuration.new(microseconds: 15_500).milliseconds # => 15.5\n```","summary":"<p>Returns monotonic milliseconds, including the fractional part.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":113,"url":null},"def":{"name":"milliseconds","return_type":"Float64","visibility":"Public","body":"nanoseconds / 1000000"}},{"html_id":"minutes:Float64-instance-method","name":"minutes","doc":"Returns monotonic minutes, including the fractional part.\n\n```\nDuration.new(minutes: 3, seconds: 30).minutes # => 3.5\n```","summary":"<p>Returns monotonic minutes, including the fractional part.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":95,"url":null},"def":{"name":"minutes","return_type":"Float64","visibility":"Public","body":"seconds / 60"}},{"html_id":"months:Int32-instance-method","name":"months","abstract":false,"location":{"filename":"src/duration.cr","line_number":8,"url":null},"def":{"name":"months","return_type":"Int32","visibility":"Public","body":"@months"}},{"html_id":"nanoseconds:Int64-instance-method","name":"nanoseconds","abstract":false,"location":{"filename":"src/duration.cr","line_number":10,"url":null},"def":{"name":"nanoseconds","return_type":"Int64","visibility":"Public","body":"@nanoseconds"}},{"html_id":"seconds:Float64-instance-method","name":"seconds","doc":"Returns monotonic seconds, including the fractional part.\n\n```\nDuration.new(milliseconds: 15_500).seconds # => 15.5\n```","summary":"<p>Returns monotonic seconds, including the fractional part.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":104,"url":null},"def":{"name":"seconds","return_type":"Float64","visibility":"Public","body":"nanoseconds / 1000000000"}},{"html_id":"to_month_span-instance-method","name":"to_month_span","doc":"Return the month portion of this `Duration` as a Crystal stdlib\n`Time::MonthSpan` instance.","summary":"<p>Return the month portion of this <code><a href=\"Duration.html\">Duration</a></code> as a Crystal stdlib <code><a href=\"Time/MonthSpan.html\">Time::MonthSpan</a></code> instance.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":260,"url":null},"def":{"name":"to_month_span","visibility":"Public","body":"months.months"}},{"html_id":"to_postgres(io):Nil-instance-method","name":"to_postgres","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io) : Nil","args_html":"(io) : Nil","location":{"filename":"src/pg.cr","line_number":11,"url":null},"def":{"name":"to_postgres","args":[{"name":"io","external_name":"io","restriction":""}],"return_type":"Nil","visibility":"Public","body":"if zero?\n  io << \"0 seconds\"\nelse\n  if months > 0\n    (io << months) << \" months \"\n  end\n  if days > 0\n    (io << days) << \" days \"\n  end\n  if nanoseconds >= 1000\n    (io << microseconds) << \" microseconds\"\n  end\nend"}},{"html_id":"to_postgres-instance-method","name":"to_postgres","abstract":false,"location":{"filename":"src/pg.cr","line_number":7,"url":null},"def":{"name":"to_postgres","visibility":"Public","body":"String.build do |str|\n  to_postgres(str)\nend"}},{"html_id":"to_span(include_days=false)-instance-method","name":"to_span","doc":"Return the monotonic portion of this `Duration` as a Crystal stdlib\n`Time::Span` instance.\n\nNOTE: Since the Crystal stdlib has no representation of calendar days, it is\nnot currently possible to incorporate the concept of calendar days. If you\nare comfortable with approximating the number of days as 24 monotonic hours\nyou can pass `include_days: true`, however keep in mind that this may return\nan incorrect value when performing arithmetic on a `Duration` and a `Time`\ncrosses a daylight savings boundary.","summary":"<p>Return the monotonic portion of this <code><a href=\"Duration.html\">Duration</a></code> as a Crystal stdlib <code><a href=\"Time/Span.html\">Time::Span</a></code> instance.</p>","abstract":false,"args":[{"name":"include_days","default_value":"false","external_name":"include_days","restriction":""}],"args_string":"(include_days = false)","args_html":"(include_days = <span class=\"n\">false</span>)","location":{"filename":"src/duration.cr","line_number":249,"url":null},"def":{"name":"to_span","args":[{"name":"include_days","default_value":"false","external_name":"include_days","restriction":""}],"visibility":"Public","body":"span = nanoseconds.nanoseconds\nif include_days\n  span = span + days.days\nend\nspan\n"}},{"html_id":"weeks:Float64-instance-method","name":"weeks","doc":"Returns the number of calendar weeks represented by this `Duration`, including the fractional part\n\n```\nDuration.new(days: 45).weeks # => 6.428571428571429\n```","summary":"<p>Returns the number of calendar weeks represented by this <code><a href=\"Duration.html\">Duration</a></code>, including the fractional part</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":131,"url":null},"def":{"name":"weeks","return_type":"Float64","visibility":"Public","body":"days / 7"}},{"html_id":"years:Float64-instance-method","name":"years","doc":"Returns the number of calendar years represented by this `Duration`, including the fractional part\n\n```\nDuration.new(months: 45).years # => 3.75\n```","summary":"<p>Returns the number of calendar years represented by this <code><a href=\"Duration.html\">Duration</a></code>, including the fractional part</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":140,"url":null},"def":{"name":"years","return_type":"Float64","visibility":"Public","body":"months / 12"}},{"html_id":"zero?-instance-method","name":"zero?","doc":"Returns `true` if this `Duration` does not measure any time at all, `false`\notherwise.","summary":"<p>Returns <code>true</code> if this <code><a href=\"Duration.html\">Duration</a></code> does not measure any time at all, <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":146,"url":null},"def":{"name":"zero?","visibility":"Public","body":"(months.zero? && days.zero?) && nanoseconds.zero?"}}],"types":[{"html_id":"duration/Duration/Parser","path":"Duration/Parser.html","kind":"module","full_name":"Duration::Parser","name":"Parser","abstract":false,"locations":[{"filename":"src/parser/iso8601.cr","line_number":11,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"duration/Duration","kind":"struct","full_name":"Duration","name":"Duration"},"types":[{"html_id":"duration/Duration/Parser/ISO8601","path":"Duration/Parser/ISO8601.html","kind":"struct","full_name":"Duration::Parser::ISO8601","name":"ISO8601","abstract":false,"superclass":{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"duration/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"duration/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/parser/iso8601.cr","line_number":11,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"duration/Duration/Parser","kind":"module","full_name":"Duration::Parser","name":"Parser"},"doc":"The `ISO8601` parser is an incredibly efficient, zero-allocation [ISO8601\nduration](https://en.wikipedia.org/wiki/ISO_8601#Durations) parser. It\nparses strings like `\"P3Y6M4DT12H30M5S\"` into `Duration` instances.\n\n```\n# 3 years, 6 months, 4 days, 12 hours, 30 minutes, 5.5 seconds\nDuration.parse_iso8601(\"P3Y6M4DT12H30M5.5S\")\n# => Duration(@months=42, @days=4, @nanoseconds=45005500000000)\n```","summary":"<p>The <code><a href=\"../../Duration/Parser/ISO8601.html\">ISO8601</a></code> parser is an incredibly efficient, zero-allocation <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Durations\">ISO8601 duration</a> parser.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/parser/iso8601.cr","line_number":11,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/parser/iso8601.cr","line_number":11,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"parse(string:String)-instance-method","name":"parse","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String)","args_html":"(string : String)","location":{"filename":"src/parser/iso8601.cr","line_number":12,"url":null},"def":{"name":"parse","args":[{"name":"string","external_name":"string","restriction":"String"}],"visibility":"Public","body":"in_time = false\nyears = 0\nmonths = 0\nweeks = 0\ndays = 0\nhours = 0_i64\nminutes = 0_i64\nseconds = 0_i64\nnanoseconds = 0_i64\nvar : Int64 = 0_i64\nfraction : Float64 = 0.0\nin_fraction = false\nfraction_div = 1.0\ni = 1\nwhile i < string.bytesize\n  c = string.to_slice[i]\n  i = i + 1\n  case c\n  when '0'.ord..'9'.ord\n    d = c - '0'.ord\n    if !in_fraction\n      var = (var * 10) + d\n    else\n      fraction_div = fraction_div * 10.0\n      fraction = fraction + (d.to_f64 / fraction_div)\n    end\n  when '.'\n    if in_fraction\n      raise(ArgumentError.new(\"Invalid ISO8601 duration: multiple decimal points in a number\"))\n    end\n    in_fraction = true\n  when 'T'\n    in_time = true\n    var = 0\n    fraction = 0.0\n    in_fraction = false\n    fraction_div = 1.0\n  when 'Y'\n    if in_fraction\n      raise(ArgumentError.new(\"Invalid ISO8601 duration: fractional years not allowed\"))\n    end\n    years = var.to_i32\n    var = 0\n    fraction = 0.0\n    in_fraction = false\n    fraction_div = 1.0\n  when 'M'\n    if in_time\n      if in_fraction\n        raise(ArgumentError.new(\"Invalid ISO8601 duration: fractional minutes not allowed\"))\n      end\n      minutes = var\n    else\n      if in_fraction\n        raise(ArgumentError.new(\"Invalid ISO8601 duration: fractional months not allowed\"))\n      end\n      months = var.to_i32\n    end\n    var = 0\n    fraction = 0.0\n    in_fraction = false\n    fraction_div = 1.0\n  when 'W'\n    if in_fraction\n      raise(ArgumentError.new(\"Invalid ISO8601 duration: fractional weeks not allowed\"))\n    end\n    weeks = var.to_i32\n    var = 0\n    fraction = 0.0\n    in_fraction = false\n    fraction_div = 1.0\n  when 'D'\n    if in_fraction\n      raise(ArgumentError.new(\"Invalid ISO8601 duration: fractional days not allowed\"))\n    end\n    days = var.to_i32\n    var = 0\n    fraction = 0.0\n    in_fraction = false\n    fraction_div = 1.0\n  when 'H'\n    if in_fraction\n      raise(ArgumentError.new(\"Invalid ISO8601 duration: fractional hours not allowed\"))\n    end\n    hours = var\n    var = 0\n    fraction = 0.0\n    in_fraction = false\n    fraction_div = 1.0\n  when 'S'\n    tot = var.to_f64 + fraction\n    seconds = var.to_i64\n    nanoseconds = (fraction * 1000000000).to_i64\n    var = 0\n    fraction = 0.0\n    in_fraction = false\n    fraction_div = 1.0\n  else\n    raise(ArgumentError.new(\"Invalid character '#{c.chr}' in ISO8601 duration\"))\n  end\nend\nDuration.new(years: years, weeks: weeks, months: months, days: days, hours: hours, minutes: minutes, seconds: seconds, nanoseconds: nanoseconds)\n"}}]}]}]},{"html_id":"duration/Int","path":"Int.html","kind":"struct","full_name":"Int","name":"Int","abstract":true,"superclass":{"html_id":"duration/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"duration/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"duration/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"duration/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"duration/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"duration/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/duration.cr","line_number":291,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"doc":"Int is the base type of all integer types.\n\nThere are four signed integer types: `Int8`, `Int16`, `Int32` and `Int64`,\nbeing able to represent numbers of 8, 16, 32 and 64 bits respectively.\nThere are four unsigned integer types: `UInt8`, `UInt16`, `UInt32` and `UInt64`.\n\nAn integer literal is an optional `+` or `-` sign, followed by\na sequence of digits and underscores, optionally followed by a suffix.\nIf no suffix is present, the literal's type is `Int32`, or `Int64` if the\nnumber doesn't fit into an `Int32`:\n\n```\n1 # Int32\n\n1_i8  # Int8\n1_i16 # Int16\n1_i32 # Int32\n1_i64 # Int64\n\n1_u8  # UInt8\n1_u16 # UInt16\n1_u32 # UInt32\n1_u64 # UInt64\n\n+10 # Int32\n-20 # Int32\n\n2147483648 # Int64\n```\n\nLiterals without a suffix that are larger than `Int64::MAX` represent a\n`UInt64` if the number fits, e.g. `9223372036854775808` and\n`0x80000000_00000000`. This behavior is deprecated and will become an error in\nthe future.\n\nThe underscore `_` before the suffix is optional.\n\nUnderscores can be used to make some numbers more readable:\n\n```\n1_000_000 # better than 1000000\n```\n\nBinary numbers start with `0b`:\n\n```\n0b1101 # == 13\n```\n\nOctal numbers start with `0o`:\n\n```\n0o123 # == 83\n```\n\nHexadecimal numbers start with `0x`:\n\n```\n0xFE012D # == 16646445\n0xfe012d # == 16646445\n```\n\nSee [`Integer` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/integers.html) in the language reference.","summary":"<p>Int is the base type of all integer types.</p>","instance_methods":[{"html_id":"calendar_day-instance-method","name":"calendar_day","doc":"Convenience method to represent the number of calendar days represented by this integer.","summary":"<p>Convenience method to represent the number of calendar days represented by this integer.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":303,"url":null},"def":{"name":"calendar_day","visibility":"Public","body":"calendar_days"}},{"html_id":"calendar_days-instance-method","name":"calendar_days","doc":"Convenience method to represent the number of calendar days represented by this integer.","summary":"<p>Convenience method to represent the number of calendar days represented by this integer.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":308,"url":null},"def":{"name":"calendar_days","visibility":"Public","body":"Duration.new(days: to_i32)"}},{"html_id":"calendar_month-instance-method","name":"calendar_month","doc":"Convenience method to represent the number of calendar months represented by this integer.","summary":"<p>Convenience method to represent the number of calendar months represented by this integer.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":323,"url":null},"def":{"name":"calendar_month","visibility":"Public","body":"calendar_months"}},{"html_id":"calendar_months-instance-method","name":"calendar_months","doc":"Convenience method to represent the number of calendar months represented by this integer.","summary":"<p>Convenience method to represent the number of calendar months represented by this integer.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":328,"url":null},"def":{"name":"calendar_months","visibility":"Public","body":"Duration.new(months: to_i32)"}},{"html_id":"calendar_week-instance-method","name":"calendar_week","doc":"Convenience method to represent the number of calendar weeks represented by this integer.","summary":"<p>Convenience method to represent the number of calendar weeks represented by this integer.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":293,"url":null},"def":{"name":"calendar_week","visibility":"Public","body":"calendar_weeks"}},{"html_id":"calendar_weeks-instance-method","name":"calendar_weeks","doc":"Convenience method to represent the number of calendar weeks represented by this integer.","summary":"<p>Convenience method to represent the number of calendar weeks represented by this integer.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":298,"url":null},"def":{"name":"calendar_weeks","visibility":"Public","body":"(7 * self).calendar_days"}},{"html_id":"calendar_year-instance-method","name":"calendar_year","doc":"Convenience method to represent the number of calendar years represented by this integer.","summary":"<p>Convenience method to represent the number of calendar years represented by this integer.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":313,"url":null},"def":{"name":"calendar_year","visibility":"Public","body":"calendar_years"}},{"html_id":"calendar_years-instance-method","name":"calendar_years","doc":"Convenience method to represent the number of calendar years represented by this integer.","summary":"<p>Convenience method to represent the number of calendar years represented by this integer.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":318,"url":null},"def":{"name":"calendar_years","visibility":"Public","body":"(12 * self).calendar_months"}}]},{"html_id":"duration/PG","path":"PG.html","kind":"module","full_name":"PG","name":"PG","abstract":false,"locations":[{"filename":"lib/pg/src/pg.cr","line_number":4,"url":null},{"filename":"lib/pg/src/pg/connection.cr","line_number":3,"url":null},{"filename":"lib/pg/src/pg/decoder.cr","line_number":4,"url":null},{"filename":"lib/pg/src/pg/decoders/array_decoder.cr","line_number":3,"url":null},{"filename":"lib/pg/src/pg/error.cr","line_number":1,"url":null},{"filename":"lib/pg/src/pg/escape_helper.cr","line_number":1,"url":null},{"filename":"lib/pg/src/pg/geo.cr","line_number":1,"url":null},{"filename":"lib/pg/src/pg/interval.cr","line_number":1,"url":null},{"filename":"lib/pg/src/pg/numeric.cr","line_number":1,"url":null},{"filename":"lib/pg/src/pg/version.cr","line_number":1,"url":null},{"filename":"src/pg.cr","line_number":22,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"duration/PG/Interval","path":"PG/Interval.html","kind":"struct","full_name":"PG::Interval","name":"Interval","abstract":false,"superclass":{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"duration/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"duration/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/pg/src/pg/interval.cr","line_number":4,"url":null},{"filename":"src/pg.cr","line_number":23,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"duration/PG","kind":"module","full_name":"PG","name":"PG"},"doc":"A representation for INTERVAL data type.\nhttps://www.postgresql.org/docs/current/datatype-datetime.html","summary":"<p>A representation for INTERVAL data type.</p>","instance_methods":[{"html_id":"to_duration-instance-method","name":"to_duration","abstract":false,"location":{"filename":"src/pg.cr","line_number":24,"url":null},"def":{"name":"to_duration","visibility":"Public","body":"Duration.new(months: months, days: days, nanoseconds: microseconds * 1000)"}}]},{"html_id":"duration/PG/ResultSet","path":"PG/ResultSet.html","kind":"class","full_name":"PG::ResultSet","name":"ResultSet","abstract":false,"superclass":{"html_id":"duration/DB/ResultSet","kind":"class","full_name":"DB::ResultSet","name":"ResultSet"},"ancestors":[{"html_id":"duration/DB/ResultSet","kind":"class","full_name":"DB::ResultSet","name":"ResultSet"},{"html_id":"duration/DB/Disposable","kind":"module","full_name":"DB::Disposable","name":"Disposable"},{"html_id":"duration/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"duration/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/pg/src/pg/result_set.cr","line_number":10,"url":null},{"filename":"src/pg.cr","line_number":33,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"duration/PG","kind":"module","full_name":"PG","name":"PG"},"instance_methods":[{"html_id":"read(t:Duration.class)-instance-method","name":"read","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"Duration.class"}],"args_string":"(t : Duration.class)","args_html":"(t : <span class=\"t\">Duration</span>.<span class=\"k\">class</span>)","location":{"filename":"src/pg.cr","line_number":34,"url":null},"def":{"name":"read","args":[{"name":"t","external_name":"t","restriction":"Duration.class"}],"visibility":"Public","body":"(read(Interval)).to_duration"}},{"html_id":"read(t:(Duration|::Nil).class)-instance-method","name":"read","abstract":false,"args":[{"name":"t","external_name":"t","restriction":"(Duration | ::Nil).class"}],"args_string":"(t : (Duration | ::Nil).class)","args_html":"(t : (<span class=\"t\">Duration</span> <span class=\"o\">|</span> <span class=\"t\">::</span><span class=\"t\">Nil</span>).<span class=\"k\">class</span>)","location":{"filename":"src/pg.cr","line_number":38,"url":null},"def":{"name":"read","args":[{"name":"t","external_name":"t","restriction":"(Duration | ::Nil).class"}],"visibility":"Public","body":"(read(::Union(Interval, ::Nil))).try(&.duration)"}}]}]},{"html_id":"duration/Time","path":"Time.html","kind":"struct","full_name":"Time","name":"Time","abstract":false,"superclass":{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"duration/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"duration/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"duration/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"duration/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/duration.cr","line_number":265,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"duration/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"duration/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"doc":"`Time` represents a date-time instant in\n[incremental time](https://www.w3.org/International/articles/definitions-time/#incremental_time)\nobserved in a specific time zone.\n\nThe calendaric calculations are based on the rules of the proleptic Gregorian\ncalendar as specified in [ISO 8601](http://xml.coverpages.org/ISO-FDIS-8601.pdf).\nLeap seconds are ignored.\n\nInternally, the time is stored as an `Int64` representing seconds from epoch\n(`0001-01-01 00:00:00.0 UTC`) and an `Int32` representing\nnanosecond-of-second with value range `0..999_999_999`.\n\nThe supported date range is `0001-01-01 00:00:00.0` to\n`9999-12-31 23:59:59.999_999_999` in any local time zone.\n\n### Telling the Time\n\nThere are several methods to retrieve a `Time` instance representing the\ncurrent time:\n\n```\nTime.utc                                        # returns the current time in UTC\nTime.local Time::Location.load(\"Europe/Berlin\") # returns the current time in time zone Europe/Berlin\nTime.local                                      # returns the current time in current time zone\n```\n\nIt is generally recommended to keep instances in UTC and only apply a\nlocal time zone when formatting for user display, unless the domain logic\nrequires having a specific time zone (for example for calendaric operations).\n\n### Creating a Specific Instant\n\n`Time` instances representing a specific instant can be created by\n`.utc` or `.new` with the date-time specified as individual arguments:\n\n```\ntime = Time.utc(2016, 2, 15, 10, 20, 30)\ntime.to_s # => \"2016-02-15 10:20:30 UTC\"\ntime = Time.local(2016, 2, 15, 10, 20, 30, location: Time::Location.load(\"Europe/Berlin\"))\ntime.to_s # => \"2016-02-15 10:20:30 +01:00\"\n# The time-of-day can be omitted and defaults to midnight (start of day):\ntime = Time.utc(2016, 2, 15)\ntime.to_s # => \"2016-02-15 00:00:00 UTC\"\n```\n\n### Retrieving Time Information\n\nEach `Time` instance allows querying calendar data:\n\n```\ntime = Time.utc(2016, 2, 15, 10, 20, 30)\ntime.year        # => 2016\ntime.month       # => 2\ntime.day         # => 15\ntime.hour        # => 10\ntime.minute      # => 20\ntime.second      # => 30\ntime.millisecond # => 0\ntime.nanosecond  # => 0\ntime.day_of_week # => Time::DayOfWeek::Monday\ntime.day_of_year # => 46\ntime.monday?     # => true\ntime.time_of_day # => 10:20:30\n```\n\nFor querying if a time is at a specific day of week, `Time` offers named\npredicate methods, delegating to `#day_of_week`:\n\n```\ntime.monday? # => true\n# ...\ntime.sunday? # => false\n```\n\n### Time Zones\n\nEach time is attached to a specific time zone, represented by a `Location`\n(see `#location`).\n`#zone` returns the time zone observed in this location at the current time\n(i.e. the instant represented by this `Time`).\n`#offset` returns the offset of the current zone in seconds.\n\n```\ntime = Time.local(2018, 3, 8, 22, 5, 13, location: Time::Location.load(\"Europe/Berlin\"))\ntime          # => 2018-03-08 22:05:13 +01:00 Europe/Berlin\ntime.location # => #<Time::Location Europe/Berlin>\ntime.zone     # => #<Time::Location::Zone CET +01:00 (3600s) STD>\ntime.offset   # => 3600\n```\n\nUsing `.utc`, the location is `Time::Location::UTC`:\n\n```\ntime = Time.utc(2018, 3, 8, 22, 5, 13)\ntime          # => 2018-03-08 22:05:13.0 UTC\ntime.location # => #<Time::Location UTC>\ntime.zone     # => #<Time::Location::Zone UTC +00:00 (0s) STD>\ntime.offset   # => 0\n```\n\nA `Time` instance can be transformed to a different time zone while retaining\nthe same instant using `#in`:\n\n```\ntime_de = Time.local(2018, 3, 8, 22, 5, 13, location: Time::Location.load(\"Europe/Berlin\"))\ntime_ar = time_de.in Time::Location.load(\"America/Buenos_Aires\")\ntime_de # => 2018-03-08 22:05:13 +01:00 Europe/Berlin\ntime_ar # => 2018-03-08 18:05:13 -03:00 America/Buenos_Aires\n```\n\nBoth `Time` instances show a different local date-time, but they represent\nthe same date-time in the instant time-line, therefore they are considered\nequal:\n\n```\ntime_de.to_utc     # => 2018-03-08 21:05:13 UTC\ntime_ar.to_utc     # => 2018-03-08 21:05:13 UTC\ntime_de == time_ar # => true\n```\n\nThere are also two special methods for converting to UTC and local time zone:\n\n```\ntime.to_utc   # equals time.in(Location::UTC)\ntime.to_local # equals time.in(Location.local)\n```\n\n`#to_local_in` allows changing the time zone while keeping\nthe same local date-time (wall clock) which results in a different instant\non the time line.\n\n### Formatting and Parsing Time\n\nTo make date-time instances exchangeable between different computer systems\nor readable to humans, they are usually converted to and from a string\nrepresentation.\n\nThe method `#to_s` formats the date-time according to a specified pattern.\n\n```\ntime = Time.utc(2015, 10, 12, 10, 30, 0)\ntime.to_s(\"%Y-%m-%d %H:%M:%S %:z\") # => \"2015-10-12 10:30:00 +00:00\"\n```\n\nSimilarly, `Time.parse` and `Time.parse!` are used to construct a `Time` instance from date-time\ninformation in a string, according to a specified pattern:\n\n```\nTime.parse(\"2015-10-12 10:30:00 +00:00\", \"%Y-%m-%d %H:%M:%S %z\", Time::Location::UTC)\nTime.parse!(\"2015-10-12 10:30:00 +00:00\", \"%Y-%m-%d %H:%M:%S %z\")\n```\n\nSee `Time::Format` for all directives.\n\n### Calculations\n\n```\nTime.utc(2015, 10, 10) - 5.days # => 2015-10-05 00:00:00 +00:00\n\nspan = Time.utc(2015, 10, 10) - Time.utc(2015, 9, 10)\nspan.days          # => 30\nspan.total_hours   # => 720\nspan.total_minutes # => 43200\n```\n\n## Measuring Time\n\nThe typical time representation provided by the operating system is based on\na \"wall clock\" which is subject to changes for clock synchronization.\nThis can result in discontinuous jumps in the time-line making it not\nsuitable for accurately measuring elapsed time.\n\nInstances of `Time` are focused on telling time – using a \"wall clock\".\nWhen `Time.local` is called multiple times, the difference between the\nreturned instances is not guaranteed to equal to the time elapsed between\nmaking the calls; even the order of the returned `Time` instances might\nnot reflect invocation order.\n\n```\nt1 = Time.utc\n# operation that takes 1 minute\nt2 = Time.utc\nt2 - t1 # => ?\n```\n\nThe resulting `Time::Span` could be anything, even negative, if the\ncomputer's wall clock has changed between both calls.\n\nAs an alternative, the operating system also provides a monotonic clock.\nIts time-line has no specified starting point but is strictly linearly\nincreasing.\n\nThis monotonic clock should always be used for measuring elapsed time.\n\nA reading from this clock can be taken using `.monotonic`:\n\n```\nt1 = Time.monotonic\n# operation that takes 1 minute\nt2 = Time.monotonic\nt2 - t1 # => 1.minute (approximately)\n```\n\nThe execution time of a block can be measured using `.measure`:\n\n```\nelapsed_time = Time.measure do\n  # operation that takes 20 milliseconds\nend\nelapsed_time # => 20.milliseconds (approximately)\n```","summary":"<p><code><a href=\"Time.html\">Time</a></code> represents a date-time instant in <a href=\"https://www.w3.org/International/articles/definitions-time/#incremental_time\">incremental time</a> observed in a specific time zone.</p>","instance_methods":[{"html_id":"+(duration:Duration):Time-instance-method","name":"+","doc":"Return a new `Time` instance that is ahead of this `Time` by the amount of time specified in `Duration`.","summary":"<p>Return a new <code><a href=\"Time.html\">Time</a></code> instance that is ahead of this <code><a href=\"Time.html\">Time</a></code> by the amount of time specified in <code><a href=\"Duration.html\">Duration</a></code>.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Duration"}],"args_string":"(duration : Duration) : Time","args_html":"(duration : <a href=\"Duration.html\">Duration</a>) : <a href=\"Time.html\">Time</a>","location":{"filename":"src/duration.cr","line_number":267,"url":null},"def":{"name":"+","args":[{"name":"duration","external_name":"duration","restriction":"Duration"}],"return_type":"Time","visibility":"Public","body":"shift(months: duration.months, days: duration.days) + duration.nanoseconds.nanoseconds"}},{"html_id":"-(duration:Duration):Time-instance-method","name":"-","doc":"Return a new `Time` instance that is behind this `Time` by the amount of time specified in `Duration`.","summary":"<p>Return a new <code><a href=\"Time.html\">Time</a></code> instance that is behind this <code><a href=\"Time.html\">Time</a></code> by the amount of time specified in <code><a href=\"Duration.html\">Duration</a></code>.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Duration"}],"args_string":"(duration : Duration) : Time","args_html":"(duration : <a href=\"Duration.html\">Duration</a>) : <a href=\"Time.html\">Time</a>","location":{"filename":"src/duration.cr","line_number":272,"url":null},"def":{"name":"-","args":[{"name":"duration","external_name":"duration","restriction":"Duration"}],"return_type":"Time","visibility":"Public","body":"shift(months: -duration.months, days: -duration.days) - duration.nanoseconds.nanoseconds"}}],"types":[{"html_id":"duration/Time/MonthSpan","path":"Time/MonthSpan.html","kind":"struct","full_name":"Time::MonthSpan","name":"MonthSpan","abstract":false,"superclass":{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"duration/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"duration/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/duration.cr","line_number":283,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"duration/Time","kind":"struct","full_name":"Time","name":"Time"},"doc":"Represents a number of months passed. Used for shifting `Time`s by a\nspecified number of months.\n\n```\nTime.local(2016, 2, 1) + 13.months # => 2017-03-01 00:00:00\nTime.local(2016, 2, 29) + 2.years  # => 2018-02-28 00:00:00\n```","summary":"<p>Represents a number of months passed.</p>","instance_methods":[{"html_id":"to_duration-instance-method","name":"to_duration","doc":"Convert this `Time::MonthSpan` into the calendar-months portion of a `Duration`.","summary":"<p>Convert this <code><a href=\"../Time/MonthSpan.html\">Time::MonthSpan</a></code> into the calendar-months portion of a <code><a href=\"../Duration.html\">Duration</a></code>.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":285,"url":null},"def":{"name":"to_duration","visibility":"Public","body":"::Duration.new(self)"}}]},{"html_id":"duration/Time/Span","path":"Time/Span.html","kind":"struct","full_name":"Time::Span","name":"Span","abstract":false,"superclass":{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"duration/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"duration/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"duration/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"duration/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"duration/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/duration.cr","line_number":276,"url":null}],"repository_name":"duration","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"duration/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"duration/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"namespace":{"html_id":"duration/Time","kind":"struct","full_name":"Time","name":"Time"},"doc":"`Time::Span` represents one period of time.\n\nA `Time::Span` initializes with the specified period.\nDifferent numbers of arguments generate a `Time::Span` in different length.\nCheck all `#new` methods for details.\n\n```\nTime::Span.new(nanoseconds: 10_000)                           # => 00:00:00.000010000\nTime::Span.new(hours: 10, minutes: 10, seconds: 10)           # => 10:10:10\nTime::Span.new(days: 10, hours: 10, minutes: 10, seconds: 10) # => 10.10:10:10\n```\n\nCalculation between `Time` also returns a `Time::Span`.\n\n```\nspan = Time.utc(2015, 10, 10) - Time.utc(2015, 9, 10)\nspan       # => 30.00:00:00\nspan.class # => Time::Span\n```\n\nInspection:\n\n```\nspan = Time::Span.new(hours: 20, minutes: 10, seconds: 10)\nspan.hours   # => 20\nspan.minutes # => 10\nspan.seconds # => 10\n```\n\nCalculation:\n\n```\na = Time::Span.new(hours: 20, minutes: 10, seconds: 10)\nb = Time::Span.new(hours: 10, minutes: 10, seconds: 10)\nc = a - b # => 10:00:00\nc.hours   # => 10\n```\n","summary":"<p><code><a href=\"../Time/Span.html\">Time::Span</a></code> represents one period of time.</p>","instance_methods":[{"html_id":"to_duration-instance-method","name":"to_duration","doc":"Convert this `Time::Span` into the monotonic portion of a `Duration`.","summary":"<p>Convert this <code><a href=\"../Time/Span.html\">Time::Span</a></code> into the monotonic portion of a <code><a href=\"../Duration.html\">Duration</a></code>.</p>","abstract":false,"location":{"filename":"src/duration.cr","line_number":278,"url":null},"def":{"name":"to_duration","visibility":"Public","body":"::Duration.new(self)"}}]}]}]}}